{"version":3,"file":"16.a2bed35cef352dd09e69.js","sources":["webpack:///./src/pages/profilePages/Sidebar/ListItemLink.js","webpack:///./src/pages/sellerPages/Seller_Sidebar.js","webpack:///./src/pages/sellerPages/components/ManageProduct/AddProductFrom.js","webpack:///./src/pages/sellerPages/components/ManageProduct/EditProductForm.js","webpack:///./src/pages/sellerPages/components/ManageProduct/SellerProductView.js","webpack:///./src/pages/sellerPages/components/Seller_Products.js","webpack:///./src/redux/actions/sellerActions/ProductActions.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nconst ListItemLink = props => {\n  return <ListItem button component={Link} {...props} />;\n};\n\nListItemLink.defaultProps = {\n  to: \"\"\n};\n\nexport default ListItemLink;\n","import React from 'react'\nimport ListItemLink from '@pages/profilePages/Sidebar/ListItemLink'\nimport { ExpansionPanel, Grid, makeStyles } from '@material-ui/core'\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ShopingCartIcon from \"@material-ui/icons/ShoppingCartOutlined\";\nimport ChangePasswordIcon from \"@material-ui/icons/LockOutlined\";\nimport LogoutIcon from \"@material-ui/icons/ExitToApp\";\nimport List from '@material-ui/core/List';\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\nimport { Dashboard } from '@material-ui/icons';\nimport { useDispatch } from \"react-redux\";\nimport { fetchSellerProducts } from \"@actions/sellerActions/ProductActions\";\n\nconst useStyle=makeStyles(theme => ({\n    root: {\n      marginTop: theme.spacing(1)\n    },\n    detail: {\n      padding: theme.spacing(1)\n    }\n  }));\n\nconst Seller_Sidebar=({ activeItem, children }) =>{\n    const classes=useStyle();\n    const dispatch = useDispatch();\n\n    return (\n        \n            <Grid container spacing={3}>\n                <Grid item md=\"auto\" xs={12} className={classes.root}>\n                    <ExpansionPanel>\n                    <List style={{ width: \"100%\" }}>\n                        <ListItemLink selected={activeItem === \"seller_dashboard\"} to=\"/seller_dashboard\">\n                        <ListItemIcon>\n                            <Dashboard />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Dashboard\" />\n                        </ListItemLink>\n                        \n                        <ListItemLink selected={activeItem === \"seller_product\"} to=\"/seller_product\">\n                        <ListItemIcon>\n                            <ShopingCartIcon color=\"action\" />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Products\" />\n                        </ListItemLink>\n\n                        <ListItemLink selected={activeItem === \"seller_orders\"} to=\"/seller_Order\">\n                        <ListItemIcon>\n                            <ShoppingCart />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Orders\" />\n                        </ListItemLink>\n\n\n                        <ListItemLink to=\"/seller-change-password\">\n                        <ListItemIcon>\n                            <ChangePasswordIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Change password\" />\n                        </ListItemLink>\n\n                        <ListItemLink to=\"/seller-logout\">\n                        <ListItemIcon>\n                            <LogoutIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Logout\" />\n                        </ListItemLink>\n                    </List>\n                    </ExpansionPanel>\n                    \n                </Grid>\n                <Grid item md xs={12}>\n                    {children}\n                </Grid>\n            </Grid>\n       \n        \n    )\n}\n\nexport default Seller_Sidebar\n","import React from 'react';\nimport { Button, Grid, Paper } from '@material-ui/core';\nimport { useState } from 'react';\n\nfunction AddProductFrom({ onClose, forceClose }) {\n    const paperStyle = { padding: '0 15px 40px 15px', width: 450, }\n\n    const [ProductMainImage, setProductMainImage] = useState(null);\n    const [ProductImage1, setProductImage1] = useState(null);\n    const [ProductImage2, setProductImage2] = useState(null);\n    const [ProductProposal, setProductProposal] = useState(null);\n    const [ProductName, setProductName] = useState('');\n    const [Stock, setStock] = useState(0);\n    const [ProductPrice, setProductPrice] = useState(0);\n    const [DiscountPrice, setDiscountPrice] = useState(0);\n    const [ProductDes, setProductDes] = useState('');\n    const [Size, setSize] = useState('NA');\n    const [Category, setCategory] = useState('topwear');\n\n    const handleSubmit = async () => {\n\n        if (ProductMainImage === null) {\n            alert(\"Please upload your product main image\");\n        }\n        else if (ProductImage1 === null) {\n            alert(\"Please upload your product image 1\");\n        }\n        else if (ProductImage2 === null) {\n            alert(\"Please upload your product image 2\");\n        }\n        else if (ProductProposal === null) {\n            alert(\"Please upload your product proposal\");\n        }\n        else if(ProductMainImage.size>524288)\n        {\n            alert(\"Main image file size should be less than 0.5 MB\")\n        }\n        else if(ProductImage1.size>524288)\n        {\n            alert(\"Image1 file size should be less than 0.5 MB\")\n        }\n        else if(ProductImage2.size>524288)\n        {\n            alert(\"Image2 file size should be less than 0.5 MB\")\n        }\n        else if(ProductProposal.size>1048576)\n        {\n            alert(\"Proposal file size should be less than 1 MB\")\n        }\n        else if (ProductName.length < 2) {\n            alert(\"Product name is too short\");\n        }\n        else if (parseFloat(Stock) < 10) {\n            alert(\"Product stock should be greater or equal to 10\");\n        }\n        else if (parseFloat(Stock) % 1 !== 0) {\n            alert(\"Product stock should be integer only\");\n        }\n        else if (parseFloat(ProductPrice) < 50) {\n            alert(\"Product price should be greater or equal to 50\");\n        }\n        else if (parseFloat(DiscountPrice) > parseFloat(ProductPrice)) {\n            alert(\"Discount price should be less or equal to product price\");\n        }\n        else if (parseFloat(DiscountPrice) < 50) {\n            alert(\"Discount price should be greater or equal to 50\");\n        }\n        else if (ProductDes.length < 10) {\n            alert(\"Product description should be aleast 10 characters long\");\n        }\n        else {\n            let form_data = new FormData();\n            form_data.append('title', ProductName+\" \"+Category);\n            form_data.append('sale_count', Stock);\n            form_data.append('price', ProductPrice);\n            form_data.append('discount_price', DiscountPrice);\n            form_data.append('proposal', ProductProposal);\n            form_data.append('description', ProductDes);\n            form_data.append('photo_main', ProductMainImage);\n            form_data.append('photo_1', ProductImage1);\n            form_data.append('photo_2', ProductImage2);\n            form_data.append('size', Size);\n            onClose(form_data);\n        }\n        \n        forceClose();\n    }\n\n    return (\n        <Grid>\n            <Paper elevation={0} style={paperStyle}>\n\n                <form>\n                    <Grid container spacing={2}>\n                        <Grid item xs={5}>\n                            <label>Product Main Image</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type=\"file\" accept=\".png,.jpg\" multiple\n                                onChange={(e) => setProductMainImage(e.target.files[0])} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Product Image 1</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type=\"file\" accept=\".png,.jpg\" multiple\n                                onChange={(e) => setProductImage1(e.target.files[0])} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Product Image 2</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type=\"file\" accept=\".png,.jpg\" multiple\n                                onChange={(e) => {setProductImage2(e.target.files[0])}} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Product Proposal</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type='file' accept=\".pdf\" style={{ margin: \"10px\" }}\n                                onChange={(event) => { setProductProposal(event.target.files[0]) }} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>ProductName</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type=\"text\" value={ProductName} onChange={(event) => {\n                                setProductName(event.target.value);\n                            }} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Product Stock</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type=\"number\" value={Stock} onChange={(event) => {\n                                setStock(event.target.value);\n                            }} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Product Price</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type=\"number\" value={ProductPrice} onChange={\n                                (event) => {\n                                    setProductPrice(event.target.value)\n                                }} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Discount Price</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <input type=\"number\" value={DiscountPrice} onChange={\n                                (event) => {\n                                    setDiscountPrice(event.target.value)\n                                }} required />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Product Description</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <textarea value={ProductDes} onChange={\n                                (event) => {\n                                    setProductDes(event.target.value)\n                                }} required style={{ height: \"200px\", width: \"250px\" }} />\n                        </Grid>\n                    \n                        <Grid item xs={5}>\n                            <label>Category</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <select onChange={\n                                (event) => {\n                                    setCategory(event.target.value)\n                                }}>\n                                <option selected value=\"topwear\">Topwear</option>\n                                <option value=\"bottomwear\">Bottomwear</option>\n                                <option value=\"footwear\">Footwear</option>\n                            </select>\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Size</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <select onChange={\n                                (event) => {\n                                    setSize(event.target.value)\n                                }}>\n                                <option selected value=\"NA\">NA</option>\n                                <option value=\"S\">S</option>\n                                <option value=\"M\">M</option>\n                                <option value=\"L\">L</option>\n                                <option value=\"XL\">XL</option>\n                                <option value=\"XXL\">XXL</option>\n                                <option value=\"XXXL\">XXXL</option>\n                                <option value=\"4XL\">4XL</option>\n                                <option value=\"FREE SIZE\">FREE SIZE</option>\n                            </select>\n                        </Grid>\n\n                        <Grid item xs={6}></Grid>\n                        <Grid item xs={6}>\n                            <Button type=\"submit\" onClick={handleSubmit} style={{ background: \"green\", color: \"white\", fontWeight: \"bold\" }}>Submit</Button>\n                        </Grid>\n                    </Grid>\n\n\n                </form>\n            </Paper>\n        </Grid>\n    )\n}\n\nexport default AddProductFrom\n","import React from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\nimport { TextField, Grid, Paper, Button } from '@material-ui/core'\n\nfunction EditProductForm({ onClose, sellerProduct }) {\n    const paperStyle = { padding: '0 15px 40px 15px', width: 450, }\n    const btnStyle = { marginTop: 20 }\n\n    const values = {\n        stock: sellerProduct['sale_count'],\n        product_price: sellerProduct['price'],\n        discount_price: sellerProduct['discount_price'],\n    }\n\n    const validationSchema = Yup.object().shape({\n        stock: Yup.number().min(10).required('Product stock must be atleast 10'),\n        product_price: Yup.number().min(50).required('Product stock must be atleast 50'),\n        discount_price: Yup.number().min(0).required('Discount Price should be less than or equal to Product Price'),\n    })\n\n    const onSubmit = (values, actions) => {\n        if (parseFloat(values['stock']) < 10) {\n            alert(\"Product stock should be greater or equal to 10\");\n        }\n        else if (parseFloat(values['stock']) % 1 !== 0) {\n            alert(\"Product stock should be integer only\");\n        }\n        else if (parseFloat(values['product_price']) < 50) {\n            alert(\"Product price should be greater or equal to 50\");\n        }\n        else if (parseFloat(values['discount_price']) > parseFloat(values['product_price'])) {\n            alert(\"Discount price should be less or equal to product price\");\n        }\n        else if (parseFloat(values['discount_price']) < 50) {\n            alert(\"Discount price should be greater or equal to 50\");\n        }\n\n        sellerProduct['sale_count'] = values['stock'];\n        sellerProduct['price'] = values['product_price'];\n        sellerProduct['discount_price'] = values['discount_price'];\n        onClose(sellerProduct);\n    }\n\n    return (\n        <Grid>\n            <Paper elevation={0} style={paperStyle}>\n\n                <Formik initialValues={values} validationSchema={validationSchema} onSubmit={onSubmit}>\n                    {(props) => (\n                        <Form onSubmit={props.handleSubmit}>\n\n                            <Field as={TextField} name='stock' label=\"Product Stock\" placeholder={props.values.stock} values={props.values.stock}\n                                onChange={props.handleChange} fullWidth error={props.errors.stock && props.touched.stock}\n                                helperText={<ErrorMessage name='stock' />} required style={{ marginTop: \"10px\" }} />\n\n                            <Field as={TextField} name=\"product_price\" label=\"Product Price\" placeholder={props.values.product_price} values={props.values.product_price}\n                                onChange={props.handleChange} fullWidth required error={props.errors.product_price && props.touched.product_price}\n                                helperText={<ErrorMessage name='product_price' />} required style={{ marginTop: \"10px\" }} />\n\n                            <Field as={TextField} name=\"discount_price\" label=\"Discount Price\" placeholder={props.values.discount_price} values={props.values.discount_price}\n                                onChange={props.handleChange} fullWidth required error={props.errors.discount_price && props.touched.discount_price}\n                                helperText={<ErrorMessage name='discount_price' />} required style={{ marginTop: \"10px\" }} />\n\n\n                            <Button type='submit' style={btnStyle} variant='contained'\n                                color='primary'>Edit</Button>\n                        </Form>\n                    )}\n                </Formik>\n            </Paper>\n        </Grid>\n    )\n}\n\nexport default EditProductForm","import React from 'react'\nimport { Button, Grid, Paper } from '@material-ui/core'\n\n\nfunction SellerProductView({ sellerProduct, handleRemove }) {\n    const paperStyle = { padding: '0 10px 40px 25px', width: 400, }\n    const {\n        title,\n        photo_1,\n        photo_2,\n        description,\n        price,\n        discount_price,\n        sale_count,\n    } = sellerProduct;\n\n    return (\n        <Grid>\n            <Paper elevation={0} style={paperStyle}>\n                <form>\n\n                    <Grid container spacing={4}>\n\n                        <Grid item xs={6}>\n                            <img src={photo_1} style={{ height: \"150px\", width: \"150px\" }} />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <img src={photo_2} style={{ height: \"150px\", width: \"150px\" }} />\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Name</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <label>{title}</label>\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Stock</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <label>{sale_count}</label>\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Price</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <label>{price}</label>\n                        </Grid>\n\n                        <Grid item xs={5}>\n                            <label>Discount Price</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <label>{discount_price}</label>\n                        </Grid>\n\n\n                        <Grid item xs={5}>\n                            <label>Description</label>\n                        </Grid>\n                        <Grid item xs={7}>\n                            <label>{description}</label>\n                        </Grid>\n\n                        <Grid item xs={4}>\n\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button type=\"submit\" onClick={()=>handleRemove(sellerProduct)} style={{ background: \"red\", color: \"white\", fontWeight: \"bold\" }}>Remove Product</Button>\n                        </Grid>\n\n                    </Grid>\n\n\n                </form>\n            </Paper>\n        </Grid>\n    )\n}\n\nexport default SellerProductView","import * as React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Avatar, Grid } from '@material-ui/core';\nimport Seller_Sidebar from '../Seller_Sidebar';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, Typography, Box } from '@material-ui/core';\nimport { Image } from '@material-ui/icons';\nimport { Button, Modal } from \"@material-ui/core\";\nimport AddProductFrom from './ManageProduct/AddProductFrom';\nimport EditProductForm from './ManageProduct/EditProductForm';\nimport SellerProductView from './ManageProduct/SellerProductView';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSellerProducts } from \"@actions/sellerActions/ProductActions\";\nimport { createSellerProduct } from \"@actions/sellerActions/ProductActions\";\nimport { updateSellerProduct } from \"@actions/sellerActions/ProductActions\";\nimport { deleteSellerProduct } from \"@actions/sellerActions/ProductActions\";\n\n\nconst modal_Style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 500,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nfunction Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom style={{ marginTop: \"10px\" }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nconst useStyle = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1)\n  },\n  detail: {\n    padding: theme.spacing(1)\n  },\n  header: {\n    color: \"white\",\n    fontWeight: \"bold\"\n  }\n}));\n\nexport default function Seller_Products() {\n  const classes = useStyle();\n  const dispatch = useDispatch();\n  const sellerProducts = useSelector(state => state.seller.sellerProducts);\n  useEffect(() => {\n    dispatch(fetchSellerProducts());\n  }, [dispatch]);\n\n  const [addOpen, setAddOpen] = React.useState(false);\n  const handleAddOpen = () => setAddOpen(true);\n  const addClose = (newSellerProduct) => {\n    dispatch(createSellerProduct(newSellerProduct, setAddOpen));\n  }\n  const forceAddClose = () => {\n    setAddOpen(false);\n  }\n\n  const [Editopen, setEditopen] = React.useState(false);\n  const handleEditopen = () => setEditopen(true);\n  const handleEditclose = () => setEditopen(false);\n  const [editSellerProduct, set_edit_sellerProduct] = React.useState(null);\n  function EditHelper(sellerProduct) {\n    if (sellerProduct['status'] === true) {\n      handleEditopen();\n      set_edit_sellerProduct(sellerProduct);\n    }\n  };\n  const editClose = (updatedSellerProduct) => {\n    dispatch(updateSellerProduct(updatedSellerProduct, updatedSellerProduct['id']));\n    handleEditclose();\n  }\n\n\n  const [viewSellerProduct, setViewSellerProduct] = React.useState(null);\n  const[viewOpen,setViewOpen]=React.useState(false);\n  const handleViewOpen = () => setViewOpen(true);\n  const handleViewClose = () => setViewOpen(false);\n  function ViewHelper(sellerProduct) {\n    setViewSellerProduct(sellerProduct);\n    handleViewOpen();\n  };\n  const handleRemove = (sellerProduct) => {    \n    dispatch(deleteSellerProduct(sellerProduct['id']));\n    handleViewClose();\n  }\n\n  function parseTitle(title) {\n    title = title + \"\";\n    return title.substr(0, title.lastIndexOf(' '));\n  }\n\n\n  return (\n    <Seller_Sidebar activeItem=\"seller_product\">\n      <Box sx={{ flexGrow: 1, marginTop: \"20px\" }}>\n        <Grid container spacing={2}>\n          <Grid item xs={9}>\n            <Title>Products</Title>\n          </Grid>\n          <Grid item xs={3}>\n            <Button onClick={handleAddOpen} style={{ background: \"green\", color: \"white\" }}>Add Product</Button>\n            <Modal\n              open={addOpen}\n              aria-labelledby=\"modal-modal-title\"\n              aria-describedby=\"modal-modal-description\"\n            >\n              <Box sx={modal_Style}>\n                <Title>Add Product</Title>\n                <AddProductFrom onClose={addClose} forceClose={forceAddClose}/>\n              </Box>\n            </Modal>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Paper className={classes.root}>\n        <Table>\n          <TableHead>\n            <TableRow style={{ background: 'black' }}>\n\n              <TableCell className={classes.header} align=\"center\">\n                SNo.\n              </TableCell>\n              <TableCell className={classes.header} align=\"center\">\n                Product\n              </TableCell>\n              <TableCell className={classes.header} align=\"center\">\n                Stock\n              </TableCell>\n              <TableCell className={classes.header} align=\"center\">\n                Price\n              </TableCell>\n              <TableCell className={classes.header} align=\"center\">\n                View\n              </TableCell>\n              <TableCell className={classes.header} align=\"center\">\n                Status\n              </TableCell>\n              <TableCell className={classes.header} align=\"center\">\n                Action\n              </TableCell>\n\n            </TableRow>\n          </TableHead>\n          <TableBody>\n\n            {sellerProducts.map((sellerProduct, id) => (\n              <TableRow key={id + 1}>\n                <TableCell align=\"center\">{id + 1}</TableCell>\n                <TableCell align=\"center\" style={{ alignItems: \"center\" }}>{parseTitle(sellerProduct.title)}</TableCell>\n                <TableCell align=\"center\">{sellerProduct['sale_count']}</TableCell>\n                <TableCell align=\"center\">{sellerProduct['price']}</TableCell>\n\n                <TableCell Button align=\"center\" onClick={()=>ViewHelper(sellerProduct)} style={{background:\"green\",color:\"white\",fontSize:\"16px\",fontWeight:\"bold\",cursor:\"pointer\"}}>View</TableCell>\n\n                {sellerProduct['status'] === true ? <TableCell align=\"center\" style={{ color: \"green\", fontWeight: \"bold\" }}>{\"Approved\"}</TableCell> :\n                  <TableCell align=\"center\" style={{ color: \"red\", fontWeight: \"bold\" }}>{\"Pending\"}</TableCell>\n                }\n                {\n                  sellerProduct['status'] === true ? <TableCell Button align=\"center\" onClick={() => EditHelper(sellerProduct)} style={{ background: \"red\", color: \"white\", fontSize: \"16px\", fontWeight: \"bold\", cursor: \"pointer\" }}>Edit</TableCell>\n                    : <TableCell></TableCell>\n                }\n\n              </TableRow>\n            ))}\n\n            <Modal open={viewOpen} onClose={handleViewClose} aria-labelledby=\"modal-modal-title\"\n                    aria-describedby=\"modal-modal-description\">\n              <Box sx={modal_Style}>\n                  <Title >Product Information</Title>\n                  <SellerProductView sellerProduct={viewSellerProduct} handleRemove={handleRemove}/>\n              </Box>\n            </Modal>\n\n\n            <Modal open={Editopen} onClose={handleEditclose} aria-labelledby=\"modal-modal-title\"\n              aria-describedby=\"modal-modal-description\">\n              <Box sx={modal_Style}>\n                <Title>Edit</Title>\n                <EditProductForm onClose={editClose} sellerProduct={editSellerProduct}/>\n              </Box>\n            </Modal>\n          </TableBody>\n        </Table>\n      </Paper>\n    </Seller_Sidebar>\n  );\n}","import axios from \"axios\";\n\nimport {\n    FETCH_SELLER_PRODUCTS,\n    FETCH_SELLER_ORDERS,\n    CREATE_SELLER_PRODUCT,\n    DELETE_SELLER_PRODUCT,\n    UPDATE_SELLER_PRODUCT,\n    START_LOADING_UI,\n    STOP_LOADING_UI,\n    START_LOADING_BUTTON,\n    STOP_LOADING_BUTTON\n} from \"../../types\";\nimport { addNotif } from \"../notifActions\";\n\nexport const fetchSellerProducts = () => dispatch => {\n    dispatch({ type: START_LOADING_UI });\n    axios.get(\"/api/products/seller/backproduct/\").then(response => {\n        dispatch({ type: FETCH_SELLER_PRODUCTS, payload: response.data });\n        dispatch({ type: STOP_LOADING_UI });\n    });\n};\n\nexport const fetchSellerOrders = () => dispatch => {\n    dispatch({ type: START_LOADING_UI });\n    axios.get(\"/api/orders/orderfilter/seller/\").then(response => {\n        dispatch({ type: FETCH_SELLER_ORDERS, payload: response.data });\n        dispatch({ type: STOP_LOADING_UI });\n    });\n};\n\nexport const createSellerProduct = (newSellerProduct, setAddOpen) => dispatch => {\n    dispatch({ type: START_LOADING_BUTTON });\n    axios\n        .post(\"/api/products/seller/add/\", newSellerProduct, {\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        })\n        .then(response => {\n            dispatch({ type: CREATE_SELLER_PRODUCT, payload: response.data });\n            dispatch(addNotif({ message: \"Product has been added\" }));\n            dispatch({ type: STOP_LOADING_BUTTON });\n            setAddOpen(false);\n        })\n        .catch(error => {\n            // console.log(error, newSellerProduct);\n            dispatch({ type: STOP_LOADING_BUTTON });\n        });\n};\n\nexport const deleteSellerProduct = (id) => dispatch => {\n    dispatch({ type: START_LOADING_BUTTON });\n    axios.get(`/api/products/del/${id}/`).then(() => {\n        dispatch({ type: DELETE_SELLER_PRODUCT, payload: id });\n        dispatch({ type: STOP_LOADING_BUTTON });\n        dispatch(\n            addNotif({\n                message: \"Product has been deleted\",\n                options: { variant: \"error\" }\n            })\n        );\n    });\n};\n\nexport const updateSellerProduct = (\n    updatedSellerProduct,\n    id\n) => dispatch => {\n    dispatch({ type: START_LOADING_BUTTON });\n    axios\n        .post(`/api/products/upd/${id}/`, updatedSellerProduct)\n        .then(response => {\n            dispatch({ type: UPDATE_SELLER_PRODUCT, id, payload: response.data });\n            dispatch({ type: STOP_LOADING_BUTTON });\n            dispatch(\n                addNotif({\n                    message: \"Product has been updated\",\n                    options: { variant: \"info\" }\n                })\n            );\n        })\n        .catch(error => {\n            // console.log(error);\n            dispatch({ type: STOP_LOADING_BUTTON });\n        });\n};"],"mappings":"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","sourceRoot":""}